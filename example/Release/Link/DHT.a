;#include "DHT.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;//----- Auxiliary data ----------//
;enum DHT_STATUS_t DHT_STATUS = DHT_OK;
;
;#if (DHT_TYPE == DHT11)
;    #define _DHT_TEMP_MIN    0
;    #define _DHT_TEMP_MAX    50
;    #define _DHT_HUM_MIN    20
;    #define _DHT_HUM_MAX    90
;    #define _DHT_DELAY_READ    50
;#elif (DHT_TYPE == DHT22)
;    #define _DHT_TEMP_MIN    -40
;    #define _DHT_TEMP_MAX    80
;    #define _DHT_HUM_MIN    0
;    #define _DHT_HUM_MAX    100
;    #define _DHT_DELAY_READ    20
;#endif
;//-------------------------------//
;
;//----- Prototypes ----------------------------//
;static float dataToTemp(uint8_t x1, uint8_t x2);
;static float dataToHum(uint8_t x1, uint8_t x2);
;//---------------------------------------------//
;
;//----- Functions -----------------------------//
;void DHT_setup(void)
; 0001 001C {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 001D     delay_ms(_DHT_DELAY_SETUP);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0001 001E     DHT_STATUS = DHT_OK;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0001 001F }
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;
;void DHT_readRaw(uint8_t arr[4])
; 0001 0022 {
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0001 0023     uint8_t data[5] = {0, 0, 0, 0, 0};
; 0001 0024     uint8_t retries, i;
; 0001 0025     int8_t j;
; 0001 0026     DHT_STATUS = DHT_OK;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;	arr -> Y+9
;	data -> Y+4
;	retries -> R17
;	i -> R16
;	j -> R19
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0001 0027     retries = i = j = 0;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0001 0028 
; 0001 0029     //----- Step 1 - Start communication -----
; 0001 002A     if (DHT_STATUS == DHT_OK)
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0001 002B     {
; 0001 002C         //Request data
; 0001 002D         digitalWrite(DHT_PIN, LOW);            //DHT_PIN = 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0001 002E         pinMode(DHT_PIN, OUTPUT);            //DHT_PIN = Output
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0001 002F         delay_ms(_DHT_DELAY_READ);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0001 0030 
; 0001 0031         //Setup DHT_PIN as input with pull-up resistor so as to read data
; 0001 0032         digitalWrite(DHT_PIN, HIGH);        //DHT_PIN = 1 (Pull-up resistor)
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0001 0033         pinMode(DHT_PIN, INPUT);            //DHT_PIN = Input
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0001 0034 
; 0001 0035         //Wait for response for 20-40us
; 0001 0036         retries = 0;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0001 0037         while (digitalRead(DHT_PIN))
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0001 0038         {
; 0001 0039             delay_us(2);
;PCODE: $00000046 VOL: 0
; 0001 003A             retries += 2;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0001 003B             if (retries > 60)
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0001 003C             {
; 0001 003D                 DHT_STATUS = DHT_ERROR_TIMEOUT;    //Timeout error
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0001 003E                 break;
;PCODE: $0000004E VOL: 0
; 0001 003F             }
; 0001 0040         }
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0001 0041     }
; 0001 0042     //----------------------------------------
; 0001 0043 
; 0001 0044     //----- Step 2 - Wait for response -----
; 0001 0045     if (DHT_STATUS == DHT_OK)
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0001 0046     {
; 0001 0047         //Response sequence began
; 0001 0048         //Wait for the first response to finish (low for ~80us)
; 0001 0049         retries = 0;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0001 004A         while (!digitalRead(DHT_PIN))
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0001 004B         {
; 0001 004C             delay_us(2);
;PCODE: $00000064 VOL: 0
; 0001 004D             retries += 2;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0001 004E             if (retries > 100)
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0001 004F             {
; 0001 0050                 DHT_STATUS = DHT_ERROR_TIMEOUT;    //Timeout error
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0001 0051                 break;
;PCODE: $0000006C VOL: 0
; 0001 0052             }
; 0001 0053         }
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0001 0054         //Wait for the last response to finish (high for ~80us)
; 0001 0055         retries = 0;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0001 0056         while(digitalRead(DHT_PIN))
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0001 0057         {
; 0001 0058             delay_us(2);
;PCODE: $0000007E VOL: 0
; 0001 0059             retries += 2;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0001 005A             if (retries > 100)
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0001 005B             {
; 0001 005C                 DHT_STATUS = DHT_ERROR_TIMEOUT;    //Timeout error
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0001 005D                 break;
;PCODE: $00000086 VOL: 0
; 0001 005E             }
; 0001 005F         }
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0001 0060     }
; 0001 0061     //--------------------------------------
; 0001 0062 
; 0001 0063     //----- Step 3 - Data transmission -----
; 0001 0064     if (DHT_STATUS == DHT_OK)
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0001 0065     {
; 0001 0066         //Reading 5 bytes, bit by bit
; 0001 0067         for (i = 0 ; i < 5 ; i++)
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0001 0068             for (j = 7 ; j >= 0 ; j--)
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0001 0069             {
; 0001 006A                 //There is always a leading low level of 50 us
; 0001 006B                 retries = 0;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0001 006C                 while(!digitalRead(DHT_PIN))
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0001 006D                 {
; 0001 006E                     delay_us(2);
;PCODE: $000000AD VOL: 0
; 0001 006F                     retries += 2;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0001 0070                     if (retries > 70)
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0001 0071                     {
; 0001 0072                         DHT_STATUS = DHT_ERROR_TIMEOUT;    //Timeout error
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0001 0073                         j = -1;                                //Break inner for-loop
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0001 0074                         i = 5;                                //Break outer for-loop
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0001 0075                         break;                                //Break while loop
;PCODE: $000000B9 VOL: 0
; 0001 0076                     }
; 0001 0077                 }
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0001 0078 
; 0001 0079                 if (DHT_STATUS == DHT_OK)
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0001 007A                 {
; 0001 007B                     //We read data bit || 26-28us means '0' || 70us means '1'
; 0001 007C                     delay_us(35);                            //Wait for more than 28us
;PCODE: $000000C0 VOL: 0
; 0001 007D                     if (digitalRead(DHT_PIN))                //If HIGH
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0001 007E                         bitSet(data[i], j);                    //bit = '1'
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0001 007F 
; 0001 0080                     retries = 0;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0001 0081                     while(digitalRead(DHT_PIN))
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0001 0082                     {
; 0001 0083                         delay_us(2);
;PCODE: $000000E7 VOL: 0
; 0001 0084                         retries += 2;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0001 0085                         if (retries > 100)
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0001 0086                         {
; 0001 0087                             DHT_STATUS = DHT_ERROR_TIMEOUT;    //Timeout error
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0001 0088                             break;
;PCODE: $000000EF VOL: 0
; 0001 0089                         }
; 0001 008A                     }
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0001 008B                 }
; 0001 008C             }
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0001 008D     }
; 0001 008E     //--------------------------------------
; 0001 008F 
; 0001 0090 
; 0001 0091     //----- Step 4 - Check checksum and return data -----
; 0001 0092     if (DHT_STATUS == DHT_OK)
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0001 0093     {
; 0001 0094         if (((uint8_t)(data[0] + data[1] + data[2] + data[3])) != data[4])
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0001 0095         {
; 0001 0096             DHT_STATUS = DHT_ERROR_CHECKSUM;    //Checksum error
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0001 0097         }
; 0001 0098         else
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0001 0099         {
; 0001 009A             //Build returning array
; 0001 009B             //data[0] = Humidity        (int)
; 0001 009C             //data[1] = Humidity        (dec)
; 0001 009D             //data[2] = Temperature        (int)
; 0001 009E             //data[3] = Temperature        (dec)
; 0001 009F             //data[4] = Checksum
; 0001 00A0             for (i = 0 ; i < 4 ; i++)
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0001 00A1                 arr[i] = data[i];
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0001 00A2 }
;PCODE: $0000012F VOL: 0
; 0001 00A3     }
; 0001 00A4     //---------------------------------------------------
; 0001 00A5 }
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;
;void DHT_readTemperature(float *temp)
; 0001 00A8 {
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0001 00A9     float waste[1];
; 0001 00AA     DHT_read(temp, waste);
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;	*temp -> Y+4
;	waste -> Y+0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0001 00AB }
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;
;void DHT_readHumidity(float *hum)
; 0001 00AE {
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0001 00AF     float waste[1];
; 0001 00B0     DHT_read(waste, hum);
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;	*hum -> Y+4
;	waste -> Y+0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0001 00B1 }
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;
;void DHT_read(float *temp, float *hum)
; 0001 00B4 {
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0001 00B5     uint8_t data[4] = {0, 0, 0, 0};
; 0001 00B6 
; 0001 00B7     //Read data
; 0001 00B8     DHT_readRaw(data);
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;	*temp -> Y+6
;	*hum -> Y+4
;	data -> Y+0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0001 00B9 
; 0001 00BA     //If read successfully
; 0001 00BB     if (DHT_STATUS == DHT_OK)
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0001 00BC     {
; 0001 00BD         //Calculate values
; 0001 00BE         *temp = dataToTemp(data[2], data[3]);
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0001 00BF         *hum = dataToHum(data[0], data[1]);
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0001 00C0 
; 0001 00C1         //Check values
; 0001 00C2         if ((*temp < _DHT_TEMP_MIN) || (*temp > _DHT_TEMP_MAX))
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0001 00C3             DHT_STATUS = DHT_ERROR_TEMPERATURE;
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0001 00C4         else if ((*hum < _DHT_HUM_MIN) || (*hum > _DHT_HUM_MAX))
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0001 00C5             DHT_STATUS = DHT_ERROR_HUMIDITY;
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0001 00C6     }
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0001 00C7 }
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;
;float DHT_convertToFahrenheit(float temp)
; 0001 00CA {
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0001 00CB     return (temp * 1.8 + 32);
;PCODE: $0000018E VOL: 0
;	temp -> Y+0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0001 00CC }
;PCODE: $00000196 VOL: 0
;
;float DHT_convertToKelvin(float temp)
; 0001 00CF {
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0001 00D0     return (temp + 273.15);
;PCODE: $00000199 VOL: 0
;	temp -> Y+0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0001 00D1 }
;PCODE: $0000019F VOL: 0
;
;static float dataToTemp(uint8_t x1, uint8_t x2)
; 0001 00D4 {
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0001 00D5     float temp = 0.0;
; 0001 00D6 
; 0001 00D7     #if (DHT_TYPE == DHT11)
; 0001 00D8         temp = x1;
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;	x1 -> Y+5
;	x2 -> Y+4
;	temp -> Y+0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0001 00D9     #elif (DHT_TYPE == DHT22)
; 0001 00DA         //(Integral<<8 + Decimal) / 10
; 0001 00DB         temp = (bitCheck(x1, 7) ? ((((x1 & 0x7F) << 8) | x2) / (-10.0)) : (((x1 << 8) | x2) / 10.0));
; 0001 00DC     #endif
; 0001 00DD 
; 0001 00DE     return temp;
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0001 00DF }
;PCODE: $000001B2 VOL: 0
;
;static float dataToHum(uint8_t x1, uint8_t x2)
; 0001 00E2 {
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0001 00E3     float hum = 0.0;
; 0001 00E4 
; 0001 00E5     #if (DHT_TYPE == DHT11)
; 0001 00E6         hum = x1;
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;	x1 -> Y+5
;	x2 -> Y+4
;	hum -> Y+0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0001 00E7     #elif (DHT_TYPE == DHT22)
; 0001 00E8         //(Integral<<8 + Decimal) / 10
; 0001 00E9         hum = ((x1<<8) | x2) / 10.0;
; 0001 00EA     #endif
; 0001 00EB 
; 0001 00EC     return hum;
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0001 00ED }
;PCODE: $000001C5 VOL: 0
